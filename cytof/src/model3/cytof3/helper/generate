#!/usr/bin/env python

import sys, os
from gen_module import *

### CONSTANTS TO TWEAK ###################
SRC_DIR = "../src/"
STRUCTS = ['Prior', 'State', 'Fixed']
MODULE_NAME = "Cytof_Module"
#########################################

FILES = [s + '.h' for s in STRUCTS]

def addon_dest(s):
    return SRC_DIR + s + '_addon.h'

for s in STRUCTS:
    struct_file_fullpath = SRC_DIR + s + '.h'
    c_struct_contents = readFile(struct_file_fullpath)
    c_struct = get_struct(s, c_struct_contents)
    params = get_params_in_struct(c_struct)
    constructor = gen_constructor(params, s)
    new_struct = create_new_struct(struct_file_fullpath)
    writeFile(addon_dest(s), new_struct)

MODULE_FILE = MODULE_NAME + ".cpp"

MODULE_FILE_TEMPLATE = """// Generated by `generate.py`. Don't edit by hand!
<INCLUDES>

#include <Rcpp.h>
using namespace Rcpp;

RCPP_MODULE(<MODULE_NAME>) {
    <CLASSES>
}
"""


### Generate addon.h
CLASSES = ""
INCLUDES = []
for s in STRUCTS:
    struct_file_fullpath = SRC_DIR + s + '.h'
    c_struct_contents = readFile(struct_file_fullpath)
    c_struct = get_struct(s, c_struct_contents)
    params = get_params_in_struct(c_struct)
    CLASSES += gen_rcpp_module_class_contents(s, params)
    INCLUDES.append('#include "'+s+'_addon.h'+'"')
    MODULE_FILE_CONTENTS = MODULE_FILE_TEMPLATE.replace("<INCLUDES>", '\n'.join(INCLUDES))
    MODULE_FILE_CONTENTS = MODULE_FILE_CONTENTS.replace("<MODULE_NAME>", MODULE_NAME)
    MODULE_FILE_CONTENTS = MODULE_FILE_CONTENTS.replace("<CLASSES>", CLASSES)
    

#print MODULE_FILE_CONTENTS
writeFile(SRC_DIR + MODULE_FILE, MODULE_FILE_CONTENTS)

print
print "SUCCESSFUL!"
print "Remember to:"
print "  1. add `RcppModules: " + MODULE_NAME + "` to `DESCRIPTION`"
print "  2. add `Rcpp::loadModule('" + MODULE_NAME + "', TRUE)` to `R/zzz.R`"
print


