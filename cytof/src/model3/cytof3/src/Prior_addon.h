// Generated by `gen_module.py`. Don't edit by hand!
#ifndef PRIOR_ADDON_H
#define PRIOR_ADDON_H

#include <RcppArmadillo.h>

//' @export Prior
struct Prior {
  // missing mechnism. constants
  double c0;
  double c1;
  // beta_0 ~ N(m_beta0, s2_beta0). metropolis.
  double m_beta0;
  double s2_beta0;
  double cs_beta0;
  // beta_1 ~ Gamma(shape=a_beta1, rate=b_beta1). metropolis.
  // Note that `rate = mean / var`, `shape = mean * rate`.
  // i.e. `mean = shape/rate`, `var = shape / rate^2`
  double a_beta1;
  double b_beta1;
  double cs_beta1;
  // psi. Gibbs.
  double psi_0; double psi_1;
  // tau. Gibbs.
  double tau2_0; double tau2_1;
  // sig2. Gibbs.
  double a_sig;
  // s. Gibbs.
  double a_s; double b_s;
  // eta. Gibbs.
  double a_eta0;
  double a_eta1;
  // alpha. Gibbs.
  double a_alpha;
  double b_alpha;
  // H. metropolis.
  double cs_h;
  // G. constants.
  //arma::mat R;  // J x J-1 // precomputed R_{j,} = G_{j,-j} * G_{-j,-j}^{-1}
  //arma::vec S2; // J       // precomputed S_j^2 = G_{j,j} - R_{j,} * G_{-j,j}
  arma::mat G; // J x J
  // W. Gibbs
  double d_W;
  // K. constant.
  int K;

  Prior(double c0_, double c1_, double m_beta0_, double s2_beta0_, double cs_beta0_, double a_beta1_, double b_beta1_, double cs_beta1_, double psi_0_, double psi_1_, double tau2_0_, double tau2_1_, double a_sig_, double a_s_, double b_s_, double a_eta0_, double a_eta1_, double a_alpha_, double b_alpha_, double cs_h_, arma::mat G_, double d_W_, int K_) : c0(c0_), c1(c1_), m_beta0(m_beta0_), s2_beta0(s2_beta0_), cs_beta0(cs_beta0_), a_beta1(a_beta1_), b_beta1(b_beta1_), cs_beta1(cs_beta1_), psi_0(psi_0_), psi_1(psi_1_), tau2_0(tau2_0_), tau2_1(tau2_1_), a_sig(a_sig_), a_s(a_s_), b_s(b_s_), a_eta0(a_eta0_), a_eta1(a_eta1_), a_alpha(a_alpha_), b_alpha(b_alpha_), cs_h(cs_h_), G(G_), d_W(d_W_), K(K_) {}
};


#endif
