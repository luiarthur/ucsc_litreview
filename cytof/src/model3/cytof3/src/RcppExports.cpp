// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cytof3_unit_tests_cpp
void cytof3_unit_tests_cpp();
RcppExport SEXP _cytof3_cytof3_unit_tests_cpp() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cytof3_unit_tests_cpp();
    return R_NilValue;
END_RCPP
}
// test_gen_data_obj
Rcpp::List test_gen_data_obj(const std::vector<arma::mat>& y);
RcppExport SEXP _cytof3_test_gen_data_obj(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(test_gen_data_obj(y));
    return rcpp_result_gen;
END_RCPP
}
// cytof_fix_K_fit
std::vector<List> cytof_fix_K_fit(const std::vector<arma::mat>& y, int B, int burn, int warmup, int thin, int thin_K, int compute_loglike_every, int print_freq, int ncores, bool show_timings, double prop_for_training, bool shuffle_data, bool normalize_loglike, Nullable<List> prior_input, Nullable<List> truth_input, Nullable<List> init_input);
RcppExport SEXP _cytof3_cytof_fix_K_fit(SEXP ySEXP, SEXP BSEXP, SEXP burnSEXP, SEXP warmupSEXP, SEXP thinSEXP, SEXP thin_KSEXP, SEXP compute_loglike_everySEXP, SEXP print_freqSEXP, SEXP ncoresSEXP, SEXP show_timingsSEXP, SEXP prop_for_trainingSEXP, SEXP shuffle_dataSEXP, SEXP normalize_loglikeSEXP, SEXP prior_inputSEXP, SEXP truth_inputSEXP, SEXP init_inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type warmup(warmupSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type thin_K(thin_KSEXP);
    Rcpp::traits::input_parameter< int >::type compute_loglike_every(compute_loglike_everySEXP);
    Rcpp::traits::input_parameter< int >::type print_freq(print_freqSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type show_timings(show_timingsSEXP);
    Rcpp::traits::input_parameter< double >::type prop_for_training(prop_for_trainingSEXP);
    Rcpp::traits::input_parameter< bool >::type shuffle_data(shuffle_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize_loglike(normalize_loglikeSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type prior_input(prior_inputSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type truth_input(truth_inputSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type init_input(init_inputSEXP);
    rcpp_result_gen = Rcpp::wrap(cytof_fix_K_fit(y, B, burn, warmup, thin, thin_K, compute_loglike_every, print_freq, ncores, show_timings, prop_for_training, shuffle_data, normalize_loglike, prior_input, truth_input, init_input));
    return rcpp_result_gen;
END_RCPP
}
// shuffle_mat
arma::mat shuffle_mat(arma::mat X);
RcppExport SEXP _cytof3_shuffle_mat(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_mat(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cytof3_cytof3_unit_tests_cpp", (DL_FUNC) &_cytof3_cytof3_unit_tests_cpp, 0},
    {"_cytof3_test_gen_data_obj", (DL_FUNC) &_cytof3_test_gen_data_obj, 1},
    {"_cytof3_cytof_fix_K_fit", (DL_FUNC) &_cytof3_cytof_fix_K_fit, 16},
    {"_cytof3_shuffle_mat", (DL_FUNC) &_cytof3_shuffle_mat, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_cytof3(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
